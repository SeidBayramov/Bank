@using Bank.Core.Entities.Models
@using Bank.MVC.PaginationHelper
@model PaginatedList<Card>
@{
    int count = 0;
}

<div class="container">
    <h2>Card Table</h2>
    <a class="btn btn-primary" asp-action="Create" asp-controller="Card">Create</a>
    <table class="table">
        <thead>
            <tr>
                <th scope="col">#</th>
                <th scope="col">Title</th>
                <th scope="col">Descriptions</th>
                <th scope="col">Category</th>
                <th scope="col">Features</th>
                <th scope="col">Is in Stock</th>
                <th scope="col">Image</th>
                <th scope="col">Operations</th>
            </tr>
        </thead>
        <tbody>
            @if (Model != null)
            {
                @foreach (var item in Model)
                {
                    count++;
                    <tr>
                        <th scope="row">@count</th>
                        <td>@item.Title</td>
                        <td>@item.Description</td>
                        <td>
                            @if (item.Category != null)
                            {
                                @item.Category.Name
                            }
                            else
                            {
                                <!-- Handle the case where Category is null, for example: -->
                                <span class="text-danger">No Category</span>
                            }
                        </td>
                        <td>
                            @{
                                string concatenatedTitles = "";
                                if (item.CardFeatures != null && item.CardFeatures.Any())
                                {
                                    concatenatedTitles = string.Join(", ", item.CardFeatures.Select(x => x.Feature.Title).ToList());
                                    if (concatenatedTitles.Length > 50)
                                    {
                                        concatenatedTitles = concatenatedTitles.Substring(0, 50) + "...";
                                    }
                                }
                                else
                                {
                                    concatenatedTitles = "Features is showing detail page";
                                }
                            }
                            @concatenatedTitles
                        </td>


                        <td>@(item.IsInStock ? "In Stock" : "Out of Stock")</td>

                        <td>
                            <div style="width:100%;">
                                @if (item.CardImages != null && item.CardImages.Any())
                                {
                                    var firstImageUrl = item.CardImages.FirstOrDefault(x => !string.IsNullOrEmpty(x.ImageUrl))?.ImageUrl;

                                    @* Output the image URL for debugging *@
                                    <span style="display: none;">@firstImageUrl</span>

                                    <img style="width:100px; height:100px; border-radius:50%;" src="~/Upload/CardImages/@firstImageUrl" alt="Card Image">
                                }
                                else
                                {
                                    <!-- Handle the case where there are no valid ImageUrls, for example: -->
                                    <span>Image is show in detail page</span>
                                }
                            </div>
                        </td>


                     @*   @foreach (var item in Model.CardImages.Select(x => x.ImageUrl).ToList())
                        {
                            <div class="col-2 mb-3 position-relative">
                                <img style="width: 175px; border-radius: 5px;" src="~/Upload/CardImages/@item" />
                            </div>
                        }*@
                        <td>
                            <a asp-route-id="@item.Id" asp-action="Update" asp-controller="Card" class="btn btn-warning mt-4 mb-4">Update</a>
                            @if (item.IsDeleted)
                            {
                                <a asp-route-id="@item.Id" asp-action="Recover" asp-controller="Card" class="btn btn-success mt-4 mb-4">Recover</a>
                                <a asp-action="Detail" asp-controller="Card" asp-route-id="@item.Id" class="btn btn-info">Detail</a>
                            }
                            else
                            {
                                <a asp-route-id="@item.Id" asp-action="Delete" asp-controller="Card" class="btn btn-danger mt-4 mb-4">Delete</a>
                                <a asp-action="Detail" asp-controller="Card" asp-route-id="@item.Id" class="btn btn-info">Detail</a>
                                <a asp-route-id="@item.Id" asp-action="Remove" asp-controller="Card" class="btn btn-danger mt-4 mb-4  item-delete">Remove</a>
                            }
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
</div>

<div class="d-flex justify-content-center row">
    <nav aria-label="...">
        <ul class="pagination">
            <li class="page-item @(Model.HasPrev == true ? "" : "disabled")">
                <a class="page-link" asp-action="index" asp-controller="Card" asp-route-page="@(Model.ActivePage -1) ">Previous</a>
            </li>
            @for (int i = 1; i <= Model.TotalPageCount; i++)
            {
                <li class="page-item @(Model.ActivePage == i ? "active" : "")"><a class="page-link" asp-action="index" asp-controller="Card" asp-route-page="@i">@i</a></li>
            }
            <li class="page-item @(Model.HasNext == true ? "" : "disabled")">
                <a class="page-link" asp-action="index" asp-controller="Card" asp-route-page="@(Model.ActivePage +1)">Next</a>
            </li>
        </ul>
    </nav>
</div>
